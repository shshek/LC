/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode DeleteNode(TreeNode root, int key) {
        if(root == null)
            return null;
        
        TreeNode temp = root;
        if(root.val == key)
        {
            return Helper(root);
        }
        
        while(root != null)
        {
            if(root.val > key)
            {
                if(root.left != null && root.left.val == key)
                {
                    root.left = Helper(root.left);
                    break;
                }
                else
                    root = root.left;
            }
            else
            {
                if(root.right != null && root.right.val == key)
                {
                    root.right = Helper(root.right);
                    break;
                }
                else
                    root = root.right;
            }
        }
        
        return temp;
    }
    
    public TreeNode Helper(TreeNode root)
    {
        if(root == null)
            return null;
        if(root.left == null)
            return root.right;
        if(root.right == null)
            return root.left;
        
        TreeNode node = FindLargest(root.left);
        node.right = root.right;
        return root.left;
    }
    
    public TreeNode FindLargest(TreeNode node)
    {
        if(node.right == null)
            return node;
        return FindLargest(node.right);
    }
}
