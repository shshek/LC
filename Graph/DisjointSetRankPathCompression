// { Driver Code Starts
//Initial Template for C#


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DriverCode
{

    class GFG
    {
        static void Main(string[] args)
        {
            int testcases;// Taking testcase as input
            testcases = Convert.ToInt32(Console.ReadLine());
            while (testcases-- > 0)// Looping through all testcases
            {

                int n = Convert.ToInt32(Console.ReadLine());
                int q = Convert.ToInt32(Console.ReadLine());
                int[] par = new int[n + 1];
                int[] rank = new int[n + 1];
                for (int i = 1; i <= n; i++)
                {
                    par[i] = i;
                    rank[i] = 1;
                }
                Solution obj = new Solution();
                while (q-- > 0)
                {
                    var ip = Console.ReadLine().Trim().Split(' ');
                    var C = ip[0];
                    var a = int.Parse(ip[1]);
                    var b = int.Parse(ip[2]);
                    if (C == "U")
                    {
                        obj.union(a, b, par, rank);
                    }
                    else
                    {

                        var res = obj.isConnected(a, b, par, rank);
                        Console.WriteLine(res ? 1 : 0);

                    }
                }
            }

        }
    }
}
// } Driver Code Ends


//User function Template for C#

class Solution
{
    //Function to merge two nodes a and b.
    public void union(int a, int b, int[] par, int[] rank)
    {
        int u = findPar(a, par);
        int v = findPar(b, par);
        
        //code here
        if(rank[v] > rank[u])
        {
            par[u] = v;
        }
        else if (rank[u] > rank[v])
        {
            par[v] = u;
        }
        else
        {
            par[u] = v;
            rank[v]++;
        }
    }
    
    public int findPar(int x, int[] par)
    {
        if(par[x] != x)
        {
            par[x] = findPar(par[x], par);
        }
        
        return par[x];
    }
    
    //Function to check whether 2 nodes are connected or not.
    public bool isConnected(int x, int y, int[] par, int[] rank)
    {
        //code here
        if(findPar(x, par) == findPar(y, par))
            return true;
        return false;
    }
}
