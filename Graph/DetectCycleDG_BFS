// { Driver Code Starts
// Initial Template for C#

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DriverCode {

class GFG {
    static void Main(string[] args) {
        int testcases; // Taking testcase as input
        testcases = Convert.ToInt32(Console.ReadLine());
        while (testcases-- > 0) // Looping through all testcases
        {
            var ip = Console.ReadLine().Trim().Split(' ');
            int V = int.Parse(ip[0]);
            int E = int.Parse(ip[1]);
            List<List<int>> adj = new List<List<int>>();
            for (int i = 0; i < V; i++) {
                adj.Add(new List<int>());
            }
            for (int i = 0; i < E; i++) {
                ip = Console.ReadLine().Trim().Split(' ');
                int u = int.Parse(ip[0]);
                int v = int.Parse(ip[1]);
                adj[u].Add(v);
            }
            Solution obj = new Solution();
            var res = obj.isCyclic(V, adj);
            Console.WriteLine(res ? 1 : 0);
        }
    }
}
}// } Driver Code Ends


// User function Template for C#

class Solution {
    // Function to detect cycle in a directed graph.
    public bool isCyclic(int V, List<List<int>> adj) {
        //We will use Kahn's Algorithm for detecting cyle using BFS
        //Basically Kahn's algo is used for topo sort for DAG but for 
        //Cyclic, if we are not able to find, we can say it is a cycle
        
        int[] indegree = new int[V];
        Queue<int> q = new Queue<int>();
        
        for(int i = 0; i < V; i++)
        {
            indegree[i] = 0;
        }
        
        for(int i = 0; i < V; i++)
        {
            foreach(int conn in adj[i])
            {
                indegree[conn]++;
            }
        }
        
        for(int i = 0; i < V; i++)
        {
            if(indegree[i] == 0)
                q.Enqueue(i);
        }
        
        int idx = 0;
        while(q.Count != 0)
        {
            idx++;
            int temp = q.Dequeue();
            foreach(int conn in adj[temp])
            {
                --indegree[conn];
                if(indegree[conn] == 0)
                    q.Enqueue(conn);
            }
        }
        
        return (idx == V) ? false : true;
    }
}
