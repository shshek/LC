// { Driver Code Starts
//Initial Template for C#

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DriverCode
{

    class GFG
    {
        static void Main(string[] args)
        {
            int testcases;// Taking testcase as input
            testcases = Convert.ToInt32(Console.ReadLine());
            while (testcases-- > 0)// Looping through all testcases
            {
                var ip = Console.ReadLine().Trim().Split(' ');
                int V = int.Parse(ip[0]);
                int E = int.Parse(ip[1]);
                List<List<int>> adj = new List<List<int>>();
                for (int i = 0; i < V; i++)
                {
                    adj.Add(new List<int>());
                }
                for (int i = 0; i < E; i++)
                {
                    ip = Console.ReadLine().Trim().Split(' ');
                    int u = int.Parse(ip[0]);
                    int v = int.Parse(ip[1]);
                    adj[u].Add(v);
                    adj[v].Add(u);
                }
                Solution obj = new Solution();
                var res = obj.detectCycle(V, ref adj);
                Console.WriteLine(res);

            }

        }
    }
}// } Driver Code Ends


//User function Template for C#

class Solution
{
    //Function to detect cycle using DSU in an undirected graph.
    public int detectCycle(int V, ref List<List<int>> adj)
    {
        // Code here
        int[] parent = new int[V];
        int[] rank = new int[V];
        
        for(int i = 0; i < V; i++)
        {
            parent[i] = i;
            rank[i] = 0;
        }
        
        //Let's iterate through the vertices and process each edge
        for(int i = 0; i < V; i++)
        {
            //If at any point their parent's are same, there is a cycle
            foreach(int adjN in adj[i])
            {
                //clever way of putting these
                if(i<adjN && union(i, adjN, parent, rank))
                    return 1;
            }
        }
        
        return 0;
    }
    
    public int findPar(int i, int[] parent)
    {
        if(i != parent[i])
        {
            parent[i] = findPar(parent[i], parent);
        }
        return parent[i];
    }
    
    public bool union(int a, int b, int[] parent, int[] rank)
    {
        //Do not take x and y, take the same variable
        a = findPar(a, parent);
        b = findPar(b, parent);
        
        if(a == b)
            return true;
        
        if(rank[a] > rank[b])
            parent[b] = a;
        else if(rank[b] > rank[a])
            parent[a] = b;
        else
        {
            parent[a] = b;
            rank[b]++;
        }
        return false;
    }
}
