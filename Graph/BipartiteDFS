// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    int[] colour = new int[V];
	    for(int i = 0; i < V; i++)
	        colour[i] = -1;
	        
	    for(int i = 0; i < V; i++)
	    {
	        if(colour[i] == -1)
	        {
              //Ensure if all of the components are not bipartite then only return true
	            if(!isBipartiteHelper(i, colour, adj))
	                return false;
	        }
	    }
	    
	    return true;
	}

    bool isBipartiteHelper(int i, int[] colour, adj)
    {
        if(colour[i] == -1)
            colour[i] = 1;
            
        foreach(int conn in adj[i])
        {
            if(colour[conn] == -1)
            {
                colour[conn] = 1 - colour[i];
                if(!isBipartiteHelper(conn, colour, adj))
                    return false;
            }
            else
            {
                if(colour[conn] == colour[i])
                    return false;
            }
        }
        return true;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}  // } Driver Code Ends
