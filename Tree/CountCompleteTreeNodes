/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int CountNodes(TreeNode root) {
        if(root == null) return 0;
        
        //We have to find only leftmost and rightmost height and compare so that if they are equal we can use the formula
        int leftH = FindHeightLeft(root);
        int rightH = FindHeightRight(root);
        
        if(leftH == rightH)
            return (int)Math.Pow(2, leftH) - 1;
        else
        {
            return 1 + CountNodes(root.left) + CountNodes(root.right);
        }
    }
    
    public int FindHeightLeft(TreeNode node)
    {
        if(node == null)
            return 0;
        
        int count = 0;
        while(node != null)
        {
            count++;
            node = node.left;
        }
        return count;
    }
    
    public int FindHeightRight(TreeNode node)
    {
        if(node == null)
            return 0;
        
        int count = 0;
        while(node != null)
        {
            count++;
            node = node.right;
        }
        return count;
    }
}
