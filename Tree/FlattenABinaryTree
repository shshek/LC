/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public void Flatten(TreeNode root) {
        //Flatten as per PREORDER traversal
        //Funda is to travel [Right Left Node]
        //There are two approaches -> Recursive, Iterative and Morris Traversal
        
        if(root == null)
            return;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.Push(root);
        
        while(stack.Count != 0)
        {
            //Push right first and then left
            TreeNode node = stack.Pop();
            if(node.right != null)
                stack.Push(node.right);
            
            if(node.left != null)
                stack.Push(node.left);
            
            node.left = null;
            if(stack.Count != 0)
                node.right = stack.Peek();
        }
    }
}
