/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int DiameterOfBinaryTree(TreeNode root) {
        //Diameter is the max heigh diff so instead of calculating height of each node 
        //and then max, inject max while height calc
        
        int diameter = 0;
        GetMaxDepth(root, ref diameter);
        return diameter;
    }
    
    public int GetMaxDepth(TreeNode root, ref int diameter)
    {
        if(root == null) return 0;
        
        int lh = GetMaxDepth(root.left, ref diameter);
        int rh = GetMaxDepth(root.right, ref diameter);
        
        diameter = Math.Max(diameter, lh + rh);
        return 1 + Math.Max(lh, rh);
    }
}
