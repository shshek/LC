// { Driver Code Starts
//Initial Template for C#

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DriverCode
{

    class GFG
    {
        static void Main(string[] args)
        {
            int testcases;// Taking testcase as input
            testcases = Convert.ToInt32(Console.ReadLine());
            while (testcases-- > 0)// Looping through all testcases
            {

                int n = Convert.ToInt32(Console.ReadLine());
                long[] arr = new long[n];
                var stringArray = Console.ReadLine().Split(' ');
                int j = 0;
                for (int i = 0; i < stringArray.Length; i++)
                {
                    if (stringArray[i].CompareTo(" ") != -1)
                    {
                        arr[j] = long.Parse(stringArray[i]);

                        j++;
                    }
                }
                Solution obj = new Solution();
                var res = obj.inversionCount(arr,n);
                Console.WriteLine(res);
            }

        }
    }



    
 // } Driver Code Ends
//User function Template for C#

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    public long inversionCount(long[] arr, long N)
    {
        //we will use merge sort to count the merge
        long invCount = 0;
        long[] temp = new long[N];
        
        mergesort(arr, temp, 0, (int)N-1, ref invCount);
        return invCount;
    }
    
    public void mergesort(long[] arr, long[] temp, int start, int end, ref long invCount)
    {
        
        if(start < end)
        {
            int mid = (start + end)/2;
            //Console.WriteLine("Start: " + start + " Mid: " + mid + " End: " + end);
            //Always give mid and not mid-1
            mergesort(arr, temp, start, mid, ref invCount);
            mergesort(arr, temp, mid+1, end, ref invCount);
            merge(arr, temp, start, mid+1, end, ref invCount);
        }
    }
    
    public void merge(long[] arr, long[] temp, int start, int mid, int end, ref long invCount)
    {
        int i = start;
        int j = mid;
        int k = start;
        while((i <= mid-1) && (j <= end))
        {
            if(arr[i] <= arr[j])
                temp[k++] = arr[i++];
            else
            {
                temp[k++] = arr[j++];
                invCount = invCount + (mid-i);
            }
        }
        
        while(i <= mid-1)
            temp[k++] = arr[i++];
        
        while(j <= end)
            temp[k++] = arr[j++];
        
        //Now make the original array merged 
        for(int idx = start; idx <= end; idx++)
            arr[idx] = temp[idx];
    }
}



// { Driver Code Starts.
}  // } Driver Code Ends
